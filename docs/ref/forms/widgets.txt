=======
Widgets
=======

.. module:: django.forms.widgets
   :synopsis: Django's built-in form widgets.

.. currentmodule:: django.forms

A widget is Django's representation of a HTML input element. The widget
handles the rendering of the HTML, and the extraction of data from a GET/POST
dictionary that corresponds to the widget.

Specifying widgets
------------------

Whenever you specify a field on a form, Django will use a default widget
that is appropriate to the type of data that is to be displayed. To find
which widget is used on which field, see the documentation about
:ref:`built-in fields`.

However, if you want to use a different widget for a field, you can
just use the :attr:`~Field.widget` argument on the field definition. For
example::

    from django import forms

    class CommentForm(forms.Form):
        name = forms.CharField()
        url = forms.URLField()
        comment = forms.CharField(widget=forms.Textarea)

This would specify a form with a comment that uses a larger :class:`Textarea`
widget, rather than the default :class:`TextInput` widget.


Setting arguments for widgets
-----------------------------

Many widgets have optional extra arguments; they can be set when defining the
widget on the field. In the following example, the
:attr:`~SelectDateWidget.years` attribute is set for a
:class:`~django.forms.extras.widgets.SelectDateWidget`::

    from django.forms.fields import DateField, ChoiceField, MultipleChoiceField
    from django.forms.widgets import RadioSelect, CheckboxSelectMultiple
    from django.forms.extras.widgets import SelectDateWidget

    BIRTH_YEAR_CHOICES = ('1980', '1981', '1982')
    GENDER_CHOICES = (('m', 'Male'), ('f', 'Female'))
    FAVORITE_COLORS_CHOICES = (('blue', 'Blue'),
                                ('green', 'Green'),
                                ('black', 'Black'))

    class SimpleForm(forms.Form):
        birth_year = DateField(widget=SelectDateWidget(years=BIRTH_YEAR_CHOICES))
        gender = ChoiceField(widget=RadioSelect, choices=GENDER_CHOICES)
        favorite_colors = forms.MultipleChoiceField(required=False,
            widget=CheckboxSelectMultiple, choices=FAVORITE_COLORS_CHOICES)

See the :ref:`built-in widgets` for more information about which widgets
are available and which arguments they accept.


Widgets inheriting from the Select widget
-----------------------------------------

Widgets inheriting from the :class:`Select` widget deal with choices. They
present the user with a list of options to choose from. The different widgets
present this choice differently; the :class:`Select` widget itself uses a
``<select>`` HTML list representation, while :class:`RadioSelect` uses radio
buttons.

:class:`Select` widgets are used by default on :class:`ChoiceField` fields. The
choices displayed on the widget are inherited from the :class:`ChoiceField` and
changing :attr:`ChoiceField.choices` will update :attr:`Select.choices`. For
example::

    >>> from django import forms
    >>> CHOICES = (('1', 'First',), ('2', 'Second',)))
    >>> choice_field = forms.ChoiceField(widget=forms.RadioSelect, choices=CHOICES)
    >>> choice_field.choices
    [('1', 'First'), ('2', 'Second')]
    >>> choice_field.widget.choices
    [('1', 'First'), ('2', 'Second')]
    >>> choice_field.widget.choices = ()
    >>> choice_field.choices = (('1', 'First and only',),)
    >>> choice_field.widget.choices
    [('1', 'First and only')]


Widgets which offer a :attr:`~Select.choices` attribute can however be used
with fields which are not based on choice -- such as a :class:`CharField` --
but it is recommended to use a :class:`ChoiceField`-based field when the
choices are inherent to the model and not just the representational widget.

Customizing widget instances
----------------------------

When Django renders a widget as HTML, it only renders the bare minimum
HTML - Django doesn't add a class definition, or any other widget-specific
attributes. This means that all :class:`TextInput` widgets will appear the same
on your Web page.

If you want to make one widget look different to another, you need to
specify additional attributes for each widget. When you specify a
widget, you can provide a list of attributes that will be added to the
rendered HTML for the widget.

For example, take the following simple form::

    from django import forms

    class CommentForm(forms.Form):
        name = forms.CharField()
        url = forms.URLField()
        comment = forms.CharField()

This form will include three default :class:`TextInput` widgets, with default
rendering -- no CSS class, no extra attributes. This means that the input boxes
provided for each widget will be rendered exactly the same::

    >>> f = CommentForm(auto_id=False)
    >>> f.as_table()
    <tr><th>Name:</th><td><input type="text" name="name" /></td></tr>
    <tr><th>Url:</th><td><input type="text" name="url"/></td></tr>
    <tr><th>Comment:</th><td><input type="text" name="comment" /></td></tr>

On a real Web page, you probably don't want every widget to look the same. You
might want a larger input element for the comment, and you might want the
'name' widget to have some special CSS class. To do this, you use the
:attr:`Widget.attrs` argument when creating the widget:

For example::

    class CommentForm(forms.Form):
        name = forms.CharField(
                    widget=forms.TextInput(attrs={'class':'special'}))
        url = forms.URLField()
        comment = forms.CharField(
                   widget=forms.TextInput(attrs={'size':'40'}))

Django will then include the extra attributes in the rendered output:

    >>> f = CommentForm(auto_id=False)
    >>> f.as_table()
    <tr><th>Name:</th><td><input type="text" name="name" class="special"/></td></tr>
    <tr><th>Url:</th><td><input type="text" name="url"/></td></tr>
    <tr><th>Comment:</th><td><input type="text" name="comment" size="40"/></td></tr>

.. _built-in widgets:

Built-in widgets
----------------

Django provides a representation of all the basic HTML widgets, plus some
commonly used groups of widgets:

``Widget``
~~~~~~~~~~

.. class:: Widget

    This abstract class cannot be rendered, but provides the basic attribute :attr:`~Widget.attrs`.

    .. attribute:: Widget.attrs

        A dictionary containing HTML attributes to be set on the rendered widget.

        .. code-block:: python

            >>> name = forms.TextInput(attrs={'size': 10, 'title': 'Your name',})
            >>> name.render('name', 'A name')
            u'<input title="Your name" type="text" name="name" value="A name" size="10" />'

    .. method:: Widget.render(name, value[, attrs, template_name, extra_context, context_instance])

        This method returns the widget's HTML representation. The first two
        arguments are mandatory and should contain the values for the HTML
        element attributes ``name`` and ``value``. The ``value`` argument may
        be ``None`` if no default value should be rendered. Specify additional
        HTML attributes as dictionary with the ``attrs`` parameter. The given
        attributes will be joined with the :attr:`~Widget.attrs` attribute given
        to the widget's constructor.

        .. versionadded:: 1.4

        You can also change some template settings with arguments to the
        ``render`` method, since all built-in widgets are rendered from
        templates. An alternative template can be used by specifying the
        ``template_name`` argument. Additional context variables can be passed
        as dictionary with ``extra_context``. Use the ``context_instance``
        argument if you already have constructed your own
        :class:`~django.template.context.Context` instance.

    *Class attribute:*

    .. attribute:: Widget.template_name

        This class attribute holds the template name that will be used to
        render the widget. Its value is ``None`` and should be overriden in
        subclasses.

``TextInput``
~~~~~~~~~~~~~

.. class:: TextInput

    Text input: ``<input type='text' ...>``

    *Class attributes:*

    .. attribute:: TextInput.template_name

       *Default:* ``forms/widgets/input.html``

``PasswordInput``
~~~~~~~~~~~~~~~~~

.. class:: PasswordInput

    Password input: ``<input type='password' ...>``

    Takes one optional argument:

    .. attribute:: PasswordInput.render_value

        Determines whether the widget will have a value filled in when the
        form is re-displayed after a validation error (default is ``False``).

        .. versionchanged:: 1.3
            The default value for
            :attr:`~PasswordInput.render_value` was
            changed from ``True`` to ``False``

    *Class attributes:*

    .. attribute:: PasswordInput.template_name

       *Default:* ``forms/widgets/input.html``

``HiddenInput``
~~~~~~~~~~~~~~~

.. class:: HiddenInput

    Hidden input: ``<input type='hidden' ...>``

    *Class attributes:*

    .. attribute:: HiddenInput.template_name

       *Default:* ``forms/widgets/input.html``

``MultipleHiddenInput``
~~~~~~~~~~~~~~~~~~~~~~~

.. class:: MultipleHiddenInput

    Multiple ``<input type='hidden' ...>`` widgets.

    A widget that handles multiple hidden widgets for fields that have a list
    of values.

    .. attribute:: MultipleHiddenInput.choices

        This attribute is optional when the field does not have a
        :attr:`~Field.choices` attribute. If it does, it will override anything
        you set here when the attribute is updated on the :class:`Field`.

    *Class attributes:*

    .. attribute:: MultipleHiddenInput.template_name

       *Default:* ``forms/widgets/input.html``

``FileInput``
~~~~~~~~~~~~~

.. class:: FileInput

    File upload input: ``<input type='file' ...>``

    *Class attributes:*

    .. attribute:: FileInput.template_name

       *Default:* ``forms/widgets/input.html``

``ClearableFileInput``
~~~~~~~~~~~~~~~~~~~~~~

.. class:: ClearableFileInput

    .. versionadded:: 1.3

    File upload input: ``<input type='file' ...>``, with an additional checkbox
    input to clear the field's value, if the field is not required and has
    initial data.

    *Class attributes:*

    .. attribute:: ClearableFileInput.template_name

       *Default:* ``forms/widgets/clearable_input.html``

``DateInput``
~~~~~~~~~~~~~

.. class:: DateInput

    Date input as a simple text box: ``<input type='text' ...>``

    Takes one optional argument:

    .. attribute:: DateInput.format

        The format in which this field's initial value will be displayed.

    If no ``format`` argument is provided, the default format is the first
    format found in :setting:`DATE_INPUT_FORMATS` and respects
    :ref:`format-localization`.

    *Class attributes:*

    .. attribute:: DateInput.template_name

       *Default:* ``forms/widgets/input.html``

``DateTimeInput``
~~~~~~~~~~~~~~~~~

.. class:: DateTimeInput

    Date/time input as a simple text box: ``<input type='text' ...>``

    Takes one optional argument:

    .. attribute:: DateTimeInput.format

        The format in which this field's initial value will be displayed.

    If no ``format`` argument is provided, the default format is the first
    format found in :setting:`DATETIME_INPUT_FORMATS` and respects
    :ref:`format-localization`.

    *Class attributes:*

    .. attribute:: DateTimeInput.template_name

       *Default:* ``forms/widgets/input.html``

``TimeInput``
~~~~~~~~~~~~~

.. class:: TimeInput

    Time input as a simple text box: ``<input type='text' ...>``

    Takes one optional argument:

    .. attribute:: TimeInput.format

        The format in which this field's initial value will be displayed.

    If no ``format`` argument is provided, the default format is the first
    format found in :setting:`TIME_INPUT_FORMATS` and respects
    :ref:`format-localization`.

    *Class attributes:*

    .. attribute:: TimeInput.template_name

       *Default:* ``forms/widgets/input.html``

``Textarea``
~~~~~~~~~~~~

.. class:: Textarea

    Text area: ``<textarea>...</textarea>``

    *Class attributes:*

    .. attribute:: Textarea.template_name

       *Default:* ``forms/widgets/textarea.html``

``CheckboxInput``
~~~~~~~~~~~~~~~~~

.. class:: CheckboxInput

    Checkbox: ``<input type='checkbox' ...>``

    Takes one optional argument:

    .. attribute:: CheckboxInput.check_test

        A callable that takes the value of the CheckboxInput and returns
        ``True`` if the checkbox should be checked for that value.

    *Class attributes:*

    .. attribute:: CheckboxInput.template_name

       *Default:* ``forms/widgets/input.html``

``Select``
~~~~~~~~~~

.. class:: Select

    Select widget: ``<select><option ...>...</select>``

    .. attribute:: Select.choices

        This attribute is optional when the field does not have a
        :attr:`~Field.choices` attribute. If it does, it will override anything
        you set here when the attribute is updated on the :class:`Field`.

    *Class attributes:*

    .. attribute:: Select.template_name

       *Default:* ``forms/widgets/select.html``

``NullBooleanSelect``
~~~~~~~~~~~~~~~~~~~~~

.. class:: NullBooleanSelect

    Select widget with options 'Unknown', 'Yes' and 'No'

    *Class attributes:*

    .. attribute:: NullBooleanSelect.template_name

       *Default:* ``forms/widgets/select.html``

``SelectMultiple``
~~~~~~~~~~~~~~~~~~

.. class:: SelectMultiple

    Similar to :class:`Select`, but allows multiple selection:
    ``<select multiple='multiple'>...</select>``

    *Class attributes:*

    .. attribute:: SelectMultiple.template_name

       *Default:* ``forms/widgets/select.html``

``RadioSelect``
~~~~~~~~~~~~~~~

.. class:: RadioSelect

    Similar to :class:`Select`, but rendered as a list of radio buttons within
    ``<li>`` tags:

    .. code-block:: html

        <ul>
          <li><input type='radio' ...></li>
          ...
        </ul>

    *Class attributes:*

    .. attribute:: RadioSelect.template_name

       *Default:* ``forms/widgets/radio.html``

``CheckboxSelectMultiple``
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. class:: CheckboxSelectMultiple

    Similar to :class:`SelectMultiple`, but rendered as a list of check
    buttons:

    .. code-block:: html

        <ul>
          <li><input type='checkbox' ...></li>
          ...
        </ul>

    *Class attributes:*

    .. attribute:: CheckboxSelectMultiple.template_name

       *Default:* ``forms/widgets/checkbox_select.html``

``MultiWidget``
~~~~~~~~~~~~~~~

.. class:: MultiWidget

    Wrapper around multiple other widgets. You'll probably want to use this
    class with :class:`MultiValueField`.

    Its ``render()`` method is different than other widgets', because it has to
    figure out how to split a single value for display in multiple widgets.

    Subclasses may implement ``format_output``, which takes the list of
    rendered widgets and returns a string of HTML that formats them any way
    you'd like.

    The ``value`` argument used when rendering can be one of two things:

    * A ``list``.
    * A single value (e.g., a string) that is the "compressed" representation
      of a ``list`` of values.

    In the second case -- i.e., if the value is *not* a list -- ``render()``
    will first decompress the value into a ``list`` before rendering it. It
    does so by calling the ``decompress()`` method, which
    :class:`MultiWidget`'s subclasses must implement. This method takes a
    single "compressed" value and returns a ``list``. An example of this is how
    :class:`SplitDateTimeWidget` turns a :class:`datetime` value into a list
    with date and time split into two seperate values::

        class SplitDateTimeWidget(MultiWidget):

            # ...

            def decompress(self, value):
                if value:
                    return [value.date(), value.time().replace(microsecond=0)]
                return [None, None]

    When ``render()`` executes its HTML rendering, each value in the list is
    rendered with the corresponding widget -- the first value is rendered in
    the first widget, the second value is rendered in the second widget, etc.

    :class:`MultiWidget` has one required argument:

    .. attribute:: MultiWidget.widgets

        An iterable containing the widgets needed.

    *Class attributes:*

    .. attribute:: MultiWidget.template_name

       *Default:* ``forms/widgets/multiwidget.html``

``SplitDateTimeWidget``
~~~~~~~~~~~~~~~~~~~~~~~

.. class:: SplitDateTimeWidget

    Wrapper (using :class:`MultiWidget`) around two widgets: :class:`DateInput`
    for the date, and :class:`TimeInput` for the time.

    ``SplitDateTimeWidget`` has two optional attributes:

    .. attribute:: SplitDateTimeWidget.date_format

        Similar to :attr:`DateInput.format`

    .. attribute:: SplitDateTimeWidget.time_format

        Similar to :attr:`TimeInput.format`

    *Class attributes:*

    .. attribute:: SplitDateTimeWidget.template_name

       *Default:* ``forms/widgets/multiwidget.html``

``SplitHiddenDateTimeWidget``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. class:: SplitHiddenDateTimeWidget

    Similar to :class:`SplitDateTimeWidget`, but uses :class:`HiddenInput` for
    both date and time.

    *Class attributes:*

    .. attribute:: SplitHiddenDateTimeWidget.template_name

       *Default:* ``forms/widgets/multiwidget.html``

.. currentmodule:: django.forms.extras.widgets

``SelectDateWidget``
~~~~~~~~~~~~~~~~~~~~

.. class:: SelectDateWidget

    Wrapper around three :class:`~django.forms.Select` widgets: one each for
    month, day, and year. Note that this widget lives in a separate file from
    the standard widgets.

    Takes one optional argument:

    .. attribute:: SelectDateWidget.years

        An optional list/tuple of years to use in the "year" select box.
        The default is a list containing the current year and the next 9 years.
